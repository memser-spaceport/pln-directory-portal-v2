import React, { PropsWithChildren, ReactNode, useMemo } from 'react';

import { useLockBodyScroll, useToggle } from 'react-use';
import { AnimatePresence, motion } from 'framer-motion';

import s from './CreatePost.module.scss';
import { FormProvider, useForm } from 'react-hook-form';
import { FormSelect } from '@/components/form/FormSelect';
import { useForumCategories } from '@/services/forum/hooks/useForumCategories';
import { FormField } from '@/components/form/FormField';
import { FormEditor } from '@/components/form/FormEditor';
import Image from 'next/image';
import { useCreatePost } from '@/services/forum/hooks/useCreatePost';
import { toast } from 'react-toastify';
import { createPostSchema } from '@/components/page/forum/CreatePost/helpers';
import { yupResolver } from '@hookform/resolvers/yup';
import { replaceImagesWithMarkdown } from '@/utils/decode';

const fade = {
  hidden: { opacity: 0 },
  visible: { opacity: 1 },
  exit: { opacity: 0 },
};

export const CreatePost = ({ renderChildren }: { renderChildren?: (toggle: () => void) => ReactNode }) => {
  const [open, toggleOpen] = useToggle(false);
  useLockBodyScroll(open);

  const { data: topics } = useForumCategories();
  const topicsOptions = useMemo(() => {
    return (
      topics?.map((topic) => ({
        label: topic.name,
        value: topic.cid.toString(),
      })) ?? []
    );
  }, [topics]);

  const methods = useForm({
    defaultValues: {
      // topic: null,
      title: '',
      content: '',
    },
    resolver: yupResolver(createPostSchema),
  });

  const {
    handleSubmit,
    reset,
    formState: { isSubmitting, isDirty },
  } = methods;

  const { mutateAsync } = useCreatePost();

  const onSubmit = async (data: any) => {
    try {
      const content = replaceImagesWithMarkdown(data.content);

      const res = await mutateAsync({
        cid: data.topic.value,
        title: data.title,
        content,
      });

      if (res.status.code === 'ok') {
        toggleOpen(false);
        reset();
      }
    } catch (e) {
      // @ts-ignore
      toast.error(e.message);
    }
  };

  return (
    <>
      {renderChildren ? (
        renderChildren(toggleOpen)
      ) : (
        <button className={s.triggerButton} onClick={toggleOpen}>
          Create post <PlusIcon />
        </button>
      )}

      <AnimatePresence>
        {open && (
          <motion.div className="modal" initial="hidden" animate="visible" exit="exit" variants={fade} transition={{ duration: 0.2 }} style={{ zIndex: 5, position: 'fixed' }}>
            <div className={s.modal}>
              <FormProvider {...methods}>
                <form className={s.modalContent} noValidate onSubmit={handleSubmit(onSubmit)}>
                  <div className={s.logo}>
                    <Logo />
                  </div>
                  <button
                    type="button"
                    className={s.closeButton}
                    onClick={() => {
                      toggleOpen(false);
                      reset();
                    }}
                  >
                    <Image height={20} width={20} alt="close" loading="lazy" src="/icons/close.svg" />
                  </button>
                  <div className={s.header}>
                    <button
                      type="button"
                      className={s.cancelBtn}
                      onClick={() => {
                        toggleOpen(false);
                        reset();
                      }}
                    >
                      Cancel
                    </button>
                    <button className={s.submitBtn} disabled={isSubmitting}>
                      {isSubmitting ? 'Posting...' : 'Post'}
                    </button>
                  </div>

                  <div className={s.content}>
                    <FormSelect name="topic" placeholder="Select topic" label="Select topic" options={topicsOptions} />
                    <FormField name="title" placeholder="Enter the title" label="Title" />
                    <FormEditor name="content" placeholder="Write your post" label="Post" />
                  </div>

                  <div className={s.controls}>
                    <button
                      type="button"
                      className={s.cancelBtn}
                      onClick={() => {
                        toggleOpen(false);
                        reset();
                      }}
                    >
                      Cancel
                    </button>
                    <button className={s.submitBtn}>Post</button>
                  </div>
                </form>
              </FormProvider>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

const PlusIcon = () => (
  <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M18.0312 10C18.0312 10.2238 17.9424 10.4384 17.7841 10.5966C17.6259 10.7549 17.4113 10.8438 17.1875 10.8438H11.8438V16.1875C11.8438 16.4113 11.7549 16.6259 11.5966 16.7841C11.4384 16.9424 11.2238 17.0312 11 17.0312C10.7762 17.0312 10.5616 16.9424 10.4034 16.7841C10.2451 16.6259 10.1562 16.4113 10.1562 16.1875V10.8438H4.8125C4.58872 10.8438 4.37411 10.7549 4.21588 10.5966C4.05764 10.4384 3.96875 10.2238 3.96875 10C3.96875 9.77622 4.05764 9.56161 4.21588 9.40338C4.37411 9.24514 4.58872 9.15625 4.8125 9.15625H10.1562V3.8125C10.1562 3.58872 10.2451 3.37411 10.4034 3.21588C10.5616 3.05764 10.7762 2.96875 11 2.96875C11.2238 2.96875 11.4384 3.05764 11.5966 3.21588C11.7549 3.37411 11.8438 3.58872 11.8438 3.8125V9.15625H17.1875C17.4113 9.15625 17.6259 9.24514 17.7841 9.40338C17.9424 9.56161 18.0312 9.77622 18.0312 10Z"
      fill="white"
    />
  </svg>
);

const Logo = () => (
  <svg width="144" height="32" viewBox="0 0 144 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clipPath="url(#clip0_3637_21439)">
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M9.80417 18.5669L15.6542 21.9306C15.8129 22.0215 15.9036 22.1806 15.9036 22.3624V29.0897C15.9036 29.2715 15.6995 29.3851 15.5408 29.2943L9.6908 25.9306C9.53208 25.8397 9.44138 25.6806 9.44138 25.4987V18.7715C9.44138 18.5669 9.64545 18.4533 9.80417 18.5669ZM15.9036 20.226L15.9263 13.4078C15.9263 13.226 15.8129 13.0669 15.6542 12.9306L2.02685 5.15778C1.89081 5.04414 1.66406 5.18051 1.66406 5.36234V21.0215C1.66406 21.2033 1.75476 21.3624 1.91348 21.4533L7.76348 24.7715C7.89952 24.8851 8.12626 24.7488 8.12626 24.5669V16.4987C8.12626 16.317 8.33033 16.2033 8.48906 16.2942L15.6315 20.3851C15.7449 20.4306 15.9036 20.3851 15.9036 20.226ZM25.2001 8.58962L30.982 5.29415C31.1408 5.20323 31.3449 5.31687 31.3449 5.52142V21.1351C31.3449 21.317 31.2541 21.4761 31.0955 21.5669L17.5815 29.2943C17.4227 29.4079 17.2187 29.2715 17.2187 29.0897V22.3851C17.2187 22.2033 17.3094 22.0443 17.4681 21.9533L24.7012 17.7942C24.86 17.7033 24.9507 17.5442 24.9507 17.3624L24.928 9.02141C24.9507 8.83961 25.0414 8.68052 25.2001 8.58962ZM17.2187 20.1351V13.4306C17.2187 13.2487 17.3094 13.0897 17.4681 13.0215L23.2501 9.72594C23.4088 9.61234 23.6129 9.7487 23.6129 9.93057V16.7487C23.6129 16.8396 23.5675 16.9306 23.4995 16.9533L17.5815 20.3396C17.4227 20.4533 17.2187 20.317 17.2187 20.1351ZM8.5344 0.180487L2.77511 3.49868C2.63906 3.5896 2.63906 3.8396 2.77511 3.9305L16.4024 11.7033C16.5611 11.7942 16.7426 11.7942 16.9012 11.7033L22.6832 8.38507C22.8419 8.29416 22.8419 8.04416 22.6832 7.95325L9.05591 0.180487C8.87452 0.112304 8.69312 0.112304 8.5344 0.180487ZM24.0664 0.180487L18.239 3.49868C18.0803 3.5896 18.0803 3.8396 18.239 3.9305L24.1117 7.29416C24.2705 7.38506 24.4518 7.38506 24.6106 7.29416L30.4379 3.97596C30.5966 3.88506 30.5966 3.63506 30.4379 3.54414L24.5652 0.180487C24.4065 0.0895774 24.2251 0.0895774 24.0664 0.180487ZM47.829 16.1223H45.9923V12.2586H47.6702C48.8947 12.2586 50.3004 12.4177 50.3004 14.2814C50.3004 15.7814 49.2121 16.1223 47.829 16.1223ZM47.6929 17.8496C50.2778 17.8496 52.5906 17.145 52.5906 14.2587C52.5906 10.8496 49.9377 10.5314 47.6249 10.5314H43.7702V21.8269H45.9923V17.8496H47.6929ZM57.2165 15.463C56.1508 15.463 55.4706 15.8494 55.4706 17.4176V21.804H53.3165V13.4403H55.4252V14.8948C55.9014 13.8721 56.6723 13.4403 57.6247 13.4403C57.69 13.4403 57.7659 13.4455 57.8448 13.451C57.9299 13.4569 58.0184 13.463 58.1008 13.463V15.4857C57.9562 15.4857 57.817 15.4803 57.6752 15.4747C57.5281 15.4689 57.3782 15.463 57.2165 15.463ZM64.7216 17.6449C64.7216 19.3949 63.8826 20.3495 62.7035 20.3495C61.5019 20.3495 60.6628 19.3949 60.6855 17.6449C60.6855 15.8949 61.5245 14.9404 62.7035 14.9404C63.8826 14.9404 64.7216 15.8949 64.7216 17.6449ZM66.8983 17.6449C66.8983 14.7131 64.8122 13.2585 62.7035 13.2585C60.5722 13.2585 58.4861 14.6904 58.5088 17.6449C58.5088 20.5995 60.5948 22.0313 62.7035 22.0313C64.8122 22.0313 66.8983 20.5995 66.8983 17.6449ZM70.5487 11.1677V13.4404H72.2946V14.9177H70.5487V19.2586C70.5487 20.1223 70.8435 20.2814 71.6144 20.2814H72.272V21.8268H70.7075C68.8028 21.8268 68.4173 21.2359 68.4173 19.5769V14.9404H67.2382V13.4404H68.4173V11.1677H70.5487ZM79.1652 17.6449C79.1652 19.3949 78.3263 20.3495 77.1472 20.3495C75.9682 20.3495 75.1292 19.3949 75.1292 17.6449C75.1292 15.8949 75.9682 14.9404 77.1472 14.9404C78.3263 14.9404 79.1652 15.8949 79.1652 17.6449ZM81.342 17.6449C81.342 14.7131 79.256 13.2585 77.1472 13.2585C75.0385 13.2585 72.9524 14.6904 72.9524 17.6449C72.9524 20.5995 75.0385 22.0313 77.1472 22.0313C79.256 22.0313 81.342 20.5995 81.342 17.6449ZM88.0762 16.304C87.9175 15.5086 87.1466 14.9176 86.3303 14.9176C85.2192 14.9176 84.3349 15.8722 84.3349 17.6222C84.3349 19.3722 85.1739 20.3722 86.353 20.3722C87.0785 20.3722 87.8722 20.0086 88.1669 18.9858H90.2303C89.7315 21.2813 87.9855 22.0313 86.2622 22.0313C83.7681 22.0313 82.1582 20.1677 82.1582 17.6449C82.1582 15.1222 83.8587 13.2585 86.353 13.2585C88.0988 13.2585 89.8674 14.2358 90.1395 16.304H88.0762ZM97.0555 17.6449C97.0555 19.3949 96.2163 20.3495 95.0377 20.3495C93.8581 20.3495 93.019 19.3949 93.019 17.6449C93.019 15.8949 93.8581 14.9404 95.0377 14.9404C96.2163 14.9404 97.0555 15.8949 97.0555 17.6449ZM99.2323 17.6449C99.2323 14.7131 97.1461 13.2585 95.0377 13.2585C92.9283 13.2585 90.843 14.6904 90.843 17.6449C90.843 20.5995 92.9283 22.0313 95.0377 22.0313C97.1461 22.0313 99.2323 20.5995 99.2323 17.6449ZM100.456 21.8269V10.5314H102.61V21.8269H100.456ZM115.489 21.8269V20.0087H110.002V10.5314H107.78V21.8269H115.489ZM118.256 19.4632C118.256 20.0768 118.732 20.5768 119.707 20.5768C121.045 20.5768 121.612 19.8495 121.612 18.6222V17.9859C119.208 18.2359 118.256 18.5086 118.256 19.4632ZM116.034 19.554C116.034 17.5768 118.256 16.9859 121.543 16.5995V16.4631C121.543 15.1677 120.841 14.7131 119.979 14.7131C119.163 14.7131 118.46 15.1449 118.415 16.0768H116.419C116.578 14.4177 117.938 13.2131 120.093 13.2131C122.087 13.2131 123.698 14.0768 123.698 16.9177C123.698 17.0163 123.695 17.2219 123.691 17.4808V17.4994V17.5008V17.502V17.5029V17.5042C123.684 17.9589 123.675 18.5693 123.675 19.0541C123.675 20.3722 123.766 21.1223 123.925 21.8268H121.951C121.884 21.5541 121.839 21.1905 121.815 20.7813C121.226 21.6449 120.342 22.0313 119.072 22.0313C117.463 22.0313 116.034 21.0995 116.034 19.554ZM127.394 17.6223C127.394 15.9405 128.165 14.895 129.343 14.895C130.455 14.895 131.271 16.0087 131.248 17.645C131.248 19.2814 130.455 20.3723 129.343 20.3723C128.165 20.3723 127.394 19.3041 127.394 17.6223ZM127.485 10.5314H125.33V21.8269H127.485V20.7587C128.006 21.6905 129.026 22.0314 129.887 22.0314C131.861 22.0314 133.516 20.2814 133.516 17.645C133.516 15.0087 131.906 13.2587 129.887 13.2587C128.845 13.2587 127.938 13.7587 127.485 14.5314V10.5314ZM137.734 14.7586C136.94 14.7586 136.373 15.054 136.373 15.5768C136.373 16.0313 136.69 16.3722 137.484 16.554L138.595 16.804C140.25 17.1677 141.679 17.5995 141.679 19.3268C141.679 21.0541 139.956 22.0313 138.051 22.0313C135.988 22.0313 134.446 20.9632 134.241 19.0541H136.305C136.441 19.8722 137.007 20.4632 138.119 20.4632C139.026 20.4632 139.638 20.1223 139.638 19.5086C139.638 18.895 138.981 18.6449 138.278 18.4859L137.031 18.2131C135.466 17.895 134.423 17.2359 134.423 15.7131C134.423 14.1904 136.033 13.2131 137.847 13.2131C139.661 13.2131 141.248 14.0313 141.543 15.9631H139.547C139.366 15.2586 138.709 14.7586 137.734 14.7586Z"
        fill="black"
      />
    </g>
    <defs>
      <clipPath id="clip0_3637_21439">
        <rect width="140.444" height="32" fill="white" transform="translate(1.54688)" />
      </clipPath>
    </defs>
  </svg>
);
