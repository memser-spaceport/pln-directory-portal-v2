name: Jest Coverage for Changed Files

on:
  push:
    branches:
      - feat/unit-testing
  pull_request:
    branches:
      - feat/unit-testing

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(js|ts|tsx)$' || true)
        else
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.(js|ts|tsx)$' || true)
        fi
        echo "Changed files: $CHANGED_FILES"
        echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

    - name: Run tests with coverage for changed files
      if: env.CHANGED_FILES != ''
      run: |
        if [ ! -z "$CHANGED_FILES" ]; then
          echo "Running tests for: $CHANGED_FILES"
          npm test -- --coverage --findRelatedTests $CHANGED_FILES
          
          echo "Coverage Report for Changed Files:"
          echo "================================"
          
          # Debug: Show coverage file contents
          echo "Coverage file contents:"
          cat coverage/coverage-final.json
          
          # Process each changed file
          for file in $CHANGED_FILES; do
            echo "Processing coverage for: $file"
            
            if [ -f "coverage/coverage-final.json" ]; then
              # Try to get coverage data using full path
              coverage_data=$(jq -r --arg file "$file" \
                'if has($file) then
                  .[$file] | 
                  "File: \($file)\n" +
                  "Statements: \(.statements.pct)%\n" +
                  "Branches: \(.branches.pct)%\n" +
                  "Functions: \(.functions.pct)%\n" +
                  "Lines: \(.lines.pct)%"
                else
                  empty
                end' coverage/coverage-final.json)
              
              if [ ! -z "$coverage_data" ]; then
                echo "$coverage_data"
                echo "--------------------------------"
              else
                echo "No coverage data found for: $file"
              fi
            else
              echo "Coverage file not found!"
            fi
          done
        else
          echo "No relevant files changed"
        fi
